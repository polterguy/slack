
/*
 * Post to Slack
 * 
 * This function posts the specified [text] message to the specified [channel] group in Slack.
 */
.arguments

   // Injected by the framework, and is the session ID, AKA the SignalR socket channel.
   _session:string

   // Mandatory message to post.
   text:string

   // Mandatory channel to post question to.
   channel:string

// Retieving bot_token from config.
.token
set-value:x:@.token
   config.get:"magic:slack:bot_token"

// Checking if we've got an existing Slack session.
.cache-key
set-value:x:@.cache-key
   strings.concat
      .:slack_
      get-value:x:@.arguments/*/_session
      .:-
      get-value:x:@.arguments/*/channel
cache.get:x:@.cache-key
if
   not-null:x:@cache.get
   .lambda

      // We've already started a new thread in Slack, making sure we continue on the same thread.
      unwrap:x:+/*/*
      add:x:../*/execute
         .
            parent_ts:x:@cache.get

// Executing slot to do the heavy lifting.
execute:magic.slack.post
   bot_token:x:@.token
   channel:x:@.arguments/*/channel
   text:x:@.arguments/*/text
   external_id:x:@.arguments/*/_session

// Saving the ts returned from above as our currentl channel session
cache.set:x:@.cache-key
   value:x:@execute/*/ts
   expiration:3600

// Returning success to caller.
return
   result:success
   message:Notice, the request will be answered when we have an available human customer service agent
