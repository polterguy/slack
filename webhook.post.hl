
/*
 * Slack webhook, invoked when somebody replies to a message sent by the bot.
 *
 * Will store the reply in 'requests' table of 'slack' database,
 * in addition to invoking callbacks registered as "handlers" for replies.
 */
.arguments:*

/*
 * Checking if this is a URL challenge request, at which point we just echo the challenge back to caller.
 *
 * Notice, this is a hand shake request sent by Slack to verify the integrity of the event callback.
 */
if
   and
      exists:x:@.arguments/*/challenge
      not-null:x:@.arguments/*/challenge
      exists:x:@.arguments/*/type
      eq:x:@.arguments/*/type
         .:url_verification
   .lambda

      // Returning the challenge as is.
      yield
         challenge:x:@.arguments/*/challenge

// Filtering out bot replies, to avoid replies sent from the bot into the same thread from appearing.
data.connect:slack
   data.read
      table:requests
      where
         and
            ts.eq:x:@.arguments/*/event/*/ts
   if
      exists:x:@data.read/*
      .lambda

         // This is a reply originating from the cloudlet itself.
         return
            result:success

/*
 * Retrieving the ts value and checking if we've got the original request in our internal database.
 */
if
   and
      eq:x:@.arguments/*/event/*/type
         .:message
      exists:x:@.arguments/*/event/*/thread_ts
   .lambda

      /*
       * Checking if this is an interesting message.
       *
       * Notice, we only deal with replies to messages sent from the cloudlet, and we ignore all other messages.
       */
      data.connect:slack
         data.read
            table:requests
            columns
               request_id
               external_id
               text
            where
               and
                  ts.eq:x:@.arguments/*/event/*/thread_ts
         if
            exists:x:@data.read/*
            .lambda

               // This is a reply to a message originating from cloudlet, hence persisting reply.
               data.create
                  table:replies
                  values
                     request_id:x:@data.read/*/*/request_id
                     text:x:@.arguments/*/event/*/text

               // Listing all callback slots that needs to be notified of event.
               slots.vocabulary:magic.slack.callbacks.

               // Iterating through each slot returned above and invoking it.
               for-each:x:@slots.vocabulary/*

                  // Helper lambda object.
                  .exe
                     signal:SLOT_HERE

                  // Making sure we invoke the correct slot.
                  set-value:x:@.exe/*/signal
                     get-value:x:@.dp/#

                  // Parametrizing slot invocation.
                  unwrap:x:+/*/*
                  add:x:@.exe/*/signal
                     .
                        external_id:x:@data.read/*/*/external_id
                        text:x:@.arguments/*/event/*/text
                        original_request:x:@data.read/*/*/text

                  // Invoking slot.
                  eval:x:@.exe

// Returning success to Slack.
return
   result:success
